#include<iostream>
#include <iomanip>
#include"windows.h"
using namespace std;

const unsigned int Rcon[4][10] = {
 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned int S_box[16][16]{
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

const unsigned int Inverse_S_box[16][16]{
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
};

void AddRoundKey(unsigned int Plain[4][4], unsigned int Key[4][44],int round) //轮密钥加
{
    unsigned int key[4][4] = { 0 };
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            key[i][j] = Key[i][4 * round + j];
        }
    }
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            Plain[i][j] ^= key[i][j];
        }
    }
}

unsigned int S_Byte(unsigned int byte) //字节过S盒
{
    int h, l;
    h = byte >> 4;
    l = byte & 15;
    byte = S_box[h][l];
    return byte;
}

unsigned int Inverse_S_Byte(unsigned int byte) //字节逆向过S盒
{
    int h, l;
    h = byte >> 4;
    l = byte & 15;
    byte = Inverse_S_box[h][l];
    return byte;
}

void S(unsigned int Plain[4][4]) //过S盒
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            Plain[i][j] = S_Byte(Plain[i][j]);
        }
    }
}

void Inverse_S(unsigned int Cipher[4][4]) //逆向过S盒
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            Cipher[i][j] = Inverse_S_Byte(Cipher[i][j]);
        }
    }
}

void ShiftRow(unsigned int Plain[4][4]) //行移位
{
    unsigned int p1 = (Plain[1][0] << 24) | (Plain[1][1] << 16) | (Plain[1][2] << 8) | Plain[1][3];
    unsigned int p2 = (Plain[2][0] << 24) | (Plain[2][1] << 16) | (Plain[2][2] << 8) | Plain[2][3];
    unsigned int p3 = (Plain[3][0] << 24) | (Plain[3][1] << 16) | (Plain[3][2] << 8) | Plain[3][3];
    p1 = ((p1 << 8) | (p1 >> 24)) & 0xffffffff;
    p2 = ((p2 << 16) | (p2 >> 16)) & 0xffffffff;
    p3 = ((p3 << 24) | (p3 >> 8)) & 0xffffffff;
    for (int i = 0; i < 4; i++)
    {
        Plain[1][i] = (p1 >> ((3 - i) * 8)) & 0xff;
        Plain[2][i] = (p2 >> ((3 - i) * 8)) & 0xff;
        Plain[3][i] = (p3 >> ((3 - i) * 8)) & 0xff;
    }
}

void Inverse_ShiftRow(unsigned int Cipher[4][4]) //逆向行移位
{
    unsigned int p1 = (Cipher[1][0] << 24) | (Cipher[1][1] << 16) | (Cipher[1][2] << 8) | Cipher[1][3];
    unsigned int p2 = (Cipher[2][0] << 24) | (Cipher[2][1] << 16) | (Cipher[2][2] << 8) | Cipher[2][3];
    unsigned int p3 = (Cipher[3][0] << 24) | (Cipher[3][1] << 16) | (Cipher[3][2] << 8) | Cipher[3][3];
    p1 = ((p1 << 24) | (p1 >> 8)) & 0xffffffff;
    p2 = ((p2 << 16) | (p2 >> 16)) & 0xffffffff;
    p3 = ((p3 << 8) | (p3 >> 24)) & 0xffffffff;
    for (int i = 0; i < 4; i++)
    {
        Cipher[1][i] = (p1 >> ((3 - i) * 8)) & 0xff;
        Cipher[2][i] = (p2 >> ((3 - i) * 8)) & 0xff;
        Cipher[3][i] = (p3 >> ((3 - i) * 8)) & 0xff;
    }
}

unsigned int GF_Mul(unsigned int x, unsigned int y) 
{
    unsigned int result = 0;
    unsigned int c;
    for (int i = 0; i < 8; i++) {
        if ((x & 1) == 1) 
            result = result ^ y;

        c = y >> 7; //最高位
        y = y << 1;

        if (c == 1)
            y = (y ^ 0x1b) & 0xff;

        x = x >> 1;
    }
    return result;
}

void MixColumn(unsigned int Plain[4][4]) //列混合
{
    const unsigned int a[4][4] = {0x02,0x03,0x01,0x01,
                                  0x01,0x02,0x03,0x01,
                                  0x01,0x01,0x02,0x03,
                                  0x03,0x01,0x01,0x02};

    for (int i = 0; i < 4; i++)
    {
        unsigned int s0 = Plain[0][i];
        unsigned int s1 = Plain[1][i];
        unsigned int s2 = Plain[2][i];
        unsigned int s3 = Plain[3][i];

        Plain[0][i] = GF_Mul(a[0][0], s0) ^ GF_Mul(a[0][1], s1) ^ GF_Mul(a[0][2], s2) ^ GF_Mul(a[0][3], s3);
        Plain[1][i] = GF_Mul(a[1][0], s0) ^ GF_Mul(a[1][1], s1) ^ GF_Mul(a[1][2], s2) ^ GF_Mul(a[1][3], s3);
        Plain[2][i] = GF_Mul(a[2][0], s0) ^ GF_Mul(a[2][1], s1) ^ GF_Mul(a[2][2], s2) ^ GF_Mul(a[2][3], s3);
        Plain[3][i] = GF_Mul(a[3][0], s0) ^ GF_Mul(a[3][1], s1) ^ GF_Mul(a[3][2], s2) ^ GF_Mul(a[3][3], s3);
    }
}

void Inverse_MixColumn(unsigned int Cipher[4][4]) //逆向列混合
{
    const unsigned int a[4][4] = {0x0e,0x0b,0x0d,0x09,
                                  0x09,0x0e,0x0b,0x0d,
                                  0x0d,0x09,0x0e,0x0b,
                                  0x0b,0x0d,0x09,0x0e};

    for (int i = 0; i < 4; i++)
    {
        unsigned int s0 = Cipher[0][i];
        unsigned int s1 = Cipher[1][i];
        unsigned int s2 = Cipher[2][i];
        unsigned int s3 = Cipher[3][i];

        Cipher[0][i] = GF_Mul(a[0][0], s0) ^ GF_Mul(a[0][1], s1) ^ GF_Mul(a[0][2], s2) ^ GF_Mul(a[0][3], s3);
        Cipher[1][i] = GF_Mul(a[1][0], s0) ^ GF_Mul(a[1][1], s1) ^ GF_Mul(a[1][2], s2) ^ GF_Mul(a[1][3], s3);
        Cipher[2][i] = GF_Mul(a[2][0], s0) ^ GF_Mul(a[2][1], s1) ^ GF_Mul(a[2][2], s2) ^ GF_Mul(a[2][3], s3);
        Cipher[3][i] = GF_Mul(a[3][0], s0) ^ GF_Mul(a[3][1], s1) ^ GF_Mul(a[3][2], s2) ^ GF_Mul(a[3][3], s3);
    }
}

void ShiftRowsg(int i, unsigned int Key[4][44]) //移一位
{
    unsigned int p = (Key[0][i] << 24) | (Key[1][i] << 16) | (Key[2][i] << 8) | Key[3][i];
    p = ((p << 8) | (p >> 24)) & 0xffffffff;
    for (int j = 0; j < 4; j++)
    {
        Key[j][i] = (p >> ((3 - j) * 8)) & 0xff;
    }
}

void KeyExpansion(unsigned int Key[4][44])
{
    for (int k = 4; k < 44; k++)
    {
        if (k % 4 != 0)
        {
            for (int j = 0; j < 4; j++)
                Key[j][k] = Key[j][k - 1] ^ Key[j][k - 4];
        }
        else
        {
            for (int j = 0; j < 4; j++)
                Key[j][k] = Key[j][k - 1];
            ShiftRowsg(k, Key);

            for (int j = 0; j < 4; j++)
                Key[j][k] = S_Byte(Key[j][k]);

            for (int j = 0; j < 4; j++)
                Key[j][k] = Key[j][k] ^ Rcon[j][k / 4 - 1] ^ Key[j][k - 4];
        }
    }
}

void show(unsigned int show[4][4])
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            cout << hex << setw(2) << setfill('0') << show[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;
}

void show_(unsigned int show_[4][44])
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 44; j++)
        {
            cout << hex << setw(2) << setfill('0') << show_[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;
}

void Aes_Encrypt(unsigned int Plain[4][4], unsigned int Key[4][44])
{
    AddRoundKey(Plain, Key, 0);
    for (int i = 1; i < 10; i++)
    {
        //cout << "第" << i << "轮：" << endl;
        S(Plain);
        //cout << "过S盒：" << endl;
        //show(Plain);
        ShiftRow(Plain);
        //cout << "行移位：" << endl;
        //show(Plain);
        MixColumn(Plain);
        //cout << "列混合：" << endl;
        //show(Plain);
        AddRoundKey(Plain, Key, i);
        //cout << "轮密钥加：" << endl;
        //show(Plain);
    }
    //cout << "第10轮：" << endl;
    S(Plain);
    //cout << "过S盒：" << endl;
    //show(Plain);
    ShiftRow(Plain);
    //cout << "行移位：" << endl;
    //show(Plain);
    AddRoundKey(Plain, Key, 10);
}

void Aes_Decrypt(unsigned int Cipher[4][4], unsigned int Key[4][44])
{
    AddRoundKey(Cipher, Key, 10);
    for (int i = 0; i < 9; i++)
    {
        Inverse_ShiftRow(Cipher);
        Inverse_S(Cipher);
        AddRoundKey(Cipher, Key, 9 - i);
        Inverse_MixColumn(Cipher);
    }
    Inverse_ShiftRow(Cipher);
    Inverse_S(Cipher);
    AddRoundKey(Cipher, Key, 0);
}

int main()
{
    unsigned int Plain[4][4] = {0x32,0x88,0x31,0xe0,
                                0x43,0x5a,0x31,0x37,
                                0xf6,0x30,0x98,0x07,
                                0xa8,0x8d,0xa2,0x34};
    unsigned int Key[4][44] = {{0x2b,0x28,0xab,0x09},
                               {0x7e,0xae,0xf7,0xcf},
                               {0x15,0xd2,0x15,0x4f},
                               {0x16,0xa6,0x88,0x3c}};
    unsigned int Cipher[4][4] = { 0 };
    cout << "明文：" << endl;
    show(Plain);
    LARGE_INTEGER BegainTime;
    LARGE_INTEGER EndTime;
    LARGE_INTEGER Frequency;
    QueryPerformanceFrequency(&Frequency);
    QueryPerformanceCounter(&BegainTime);
    KeyExpansion(Key);
    QueryPerformanceCounter(&EndTime);
    cout << "扩展密钥用时：" << (double)(EndTime.QuadPart - BegainTime.QuadPart) / Frequency.QuadPart << "秒" << endl;
    cout << "扩展密钥：" << endl;
    show_(Key);
    LARGE_INTEGER BegainTime1;
    LARGE_INTEGER EndTime1;
    LARGE_INTEGER Frequency1;
    QueryPerformanceFrequency(&Frequency1);
    QueryPerformanceCounter(&BegainTime1);
    Aes_Encrypt(Plain, Key);
    QueryPerformanceCounter(&EndTime1);
    cout << "加密用时：" << (double)(EndTime1.QuadPart - BegainTime1.QuadPart) / Frequency1.QuadPart << "秒" << endl;
    cout << "密文：" << endl;
    show(Plain);
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            Cipher[i][j] = Plain[i][j];
        }
    }
    LARGE_INTEGER BegainTime2;
    LARGE_INTEGER EndTime2;
    LARGE_INTEGER Frequency2;
    QueryPerformanceFrequency(&Frequency2);
    QueryPerformanceCounter(&BegainTime2);
    Aes_Decrypt(Cipher, Key);
    QueryPerformanceCounter(&EndTime2);
    cout << "解密用时：" << (double)(EndTime2.QuadPart - BegainTime2.QuadPart) / Frequency2.QuadPart << "秒" << endl;
    cout << "解密得到的明文：" << endl;
    show(Cipher);
    return 0;
}
